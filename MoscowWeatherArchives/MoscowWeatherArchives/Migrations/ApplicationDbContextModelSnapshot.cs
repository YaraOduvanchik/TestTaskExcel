// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoscowWeatherArchives.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MoscowWeatherArchives.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MoscowWeatherArchives.Domain.WeatherArchive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upload_date");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_weather_archives");

                    b.ToTable("weather_archives", (string)null);
                });

            modelBuilder.Entity("MoscowWeatherArchives.Domain.WeatherDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<Guid>("WeatherArchiveId")
                        .HasColumnType("uuid")
                        .HasColumnName("weather_archive_id");

                    b.HasKey("Id")
                        .HasName("pk_weather_dates");

                    b.HasIndex("WeatherArchiveId")
                        .HasDatabaseName("ix_weather_dates_weather_archive_id");

                    b.ToTable("weather_dates", (string)null);
                });

            modelBuilder.Entity("MoscowWeatherArchives.Domain.WeatherMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("AtmosphericPressure")
                        .HasColumnType("integer")
                        .HasColumnName("atmospheric_pressure");

                    b.Property<int?>("CloudBaseHeight")
                        .HasColumnType("integer")
                        .HasColumnName("cloud_base_height");

                    b.Property<byte?>("Cloudiness")
                        .HasColumnType("smallint")
                        .HasColumnName("cloudiness");

                    b.Property<double?>("DewPoint")
                        .HasColumnType("double precision")
                        .HasColumnName("dew_point");

                    b.Property<byte?>("RelativeHumidity")
                        .HasColumnType("smallint")
                        .HasColumnName("relative_humidity");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval")
                        .HasColumnName("time");

                    b.Property<int?>("VerticalVisibility")
                        .HasColumnType("integer")
                        .HasColumnName("vertical_visibility");

                    b.Property<Guid>("WeatherDateId")
                        .HasColumnType("uuid")
                        .HasColumnName("weather_date_id");

                    b.Property<string>("WeatherPhenomena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("weather_phenomena");

                    b.Property<string>("WindDirection")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("wind_direction");

                    b.Property<int?>("WindSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed");

                    b.HasKey("Id")
                        .HasName("pk_weather_measurements");

                    b.HasIndex("WeatherDateId")
                        .HasDatabaseName("ix_weather_measurements_weather_date_id");

                    b.ToTable("weather_measurements", (string)null);
                });

            modelBuilder.Entity("MoscowWeatherArchives.Domain.WeatherDate", b =>
                {
                    b.HasOne("MoscowWeatherArchives.Domain.WeatherArchive", "WeatherArchive")
                        .WithMany("WeatherDates")
                        .HasForeignKey("WeatherArchiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weather_dates_weather_archives_weather_archive_id");

                    b.Navigation("WeatherArchive");
                });

            modelBuilder.Entity("MoscowWeatherArchives.Domain.WeatherMeasurement", b =>
                {
                    b.HasOne("MoscowWeatherArchives.Domain.WeatherDate", "WeatherDate")
                        .WithMany("WeatherMeasurements")
                        .HasForeignKey("WeatherDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weather_measurements_weather_dates_weather_date_id");

                    b.Navigation("WeatherDate");
                });

            modelBuilder.Entity("MoscowWeatherArchives.Domain.WeatherArchive", b =>
                {
                    b.Navigation("WeatherDates");
                });

            modelBuilder.Entity("MoscowWeatherArchives.Domain.WeatherDate", b =>
                {
                    b.Navigation("WeatherMeasurements");
                });
#pragma warning restore 612, 618
        }
    }
}
